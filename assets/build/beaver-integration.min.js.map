{"version":3,"file":"beaver-integration.min.js.map","sources":["../src/template-controls-visibility/index.js","../src/beaver-integration/modules/form.js","../src/beaver-integration/modules/visibility/repeater.js","../src/beaver-integration/modules/visibility/general.js","../src/beaver-integration/modules/module.js","../src/beaver-integration/modules/index.js","../src/common/modal/Modal.jsx","../src/template-block-fields/index.jsx","../src/template-block-fields/Control.jsx","../src/beaver-integration/fields/index.jsx"],"sourcesContent":["/**\r\n * Evaluate current conditions to determine block control visibility\r\n *\r\n * @see gutenberg-template-editor/blocks/dynamic/create.js\r\n * @see beaver-template-editor/modules/dynamic/module.js\r\n * @see elementor-template-editor/widgets/dynamic/visibility.js\r\n */\r\n\r\nexport default class ControlVisibility {\r\n\r\n  constructor(conditionsMap) {\r\n\r\n    this.conditionsMap = conditionsMap || []\r\n\r\n    this.getPreviousLevels = this.getPreviousLevels.bind(this)\r\n    this.getCondition = this.getCondition.bind(this)\r\n  }\r\n\r\n  evaluateConditions(conditions, getFieldValue) {\r\n\r\n    let visibility = true\r\n\r\n    if( ! conditions || ! Array.isArray(conditions) ) return visibility\r\n\r\n    for (const key of conditions) {\r\n      const condition = this.getCondition(key)\r\n      if ( ! this.evaluateCondition(condition, getFieldValue) ) return false\r\n    }\r\n\r\n    return visibility\r\n  }\r\n\r\n  /**\r\n   * Complete conditions are not stored in items, but it has a key to get it\r\n   *\r\n   * Key structure is: 0-0\r\n   *\r\n   * First is the condition number, refering to an ensemble like:\r\n   * <If>  .... <Else if> .... <If>\r\n   *\r\n   * Second is the condition level, refering to which level of the\r\n   * ensemble needs to be applied (only the starting <If> is 0 for example)\r\n   */\r\n  getCondition(key) {\r\n\r\n    const indexes = key.split('-')\r\n\r\n    const number = parseInt(indexes[0])\r\n    const level  = parseInt(indexes[1])\r\n    \r\n    const data = {\r\n      number: number,\r\n      level: level,\r\n      current: this.conditionsMap[ number ]?.[ level ],\r\n      previousLevels: this.getPreviousLevels( number, level )\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  getPreviousLevels(conditionNumber, conditionLevel) {\r\n\r\n    // If level is 0, it's the first <If> and there is no previous levels\r\n    if(conditionLevel === 0) return []\r\n\r\n    let currentLevel = 0\r\n    const previousConditions = []\r\n\r\n    while (currentLevel < conditionLevel) {\r\n      previousConditions.push( this.conditionsMap[ conditionNumber ][ currentLevel ] )\r\n      currentLevel ++\r\n    }\r\n\r\n    return previousConditions\r\n  }\r\n\r\n  /**\r\n   * Extract standardized comparisons from defined rules\r\n   */\r\n  extractComparisons(rules) {\r\n\r\n    const comparisons = []\r\n\r\n    for (const key in rules) {\r\n\r\n      if ((key==='compare' || key.slice(0, 8)==='compare_')\r\n          || (key==='value' || key.slice(0, 6)==='value_')\r\n      ) continue\r\n\r\n      if (key==='control' || key.slice(0, 8)==='control_') {\r\n\r\n        const field = rules[key]\r\n        const [_, index = 0] = key.split('_')\r\n\r\n        comparisons.push({\r\n          field,\r\n          value:   rules[`value${ index ? '_'+index : '' }`],\r\n          compare: rules[`compare${ index ? '_'+index : '' }`],\r\n        })\r\n        continue\r\n      }\r\n\r\n      // Unknown attribute - Assume controlName=expectedValue for backward compatibility\r\n\r\n      comparisons.push({\r\n        field: key,\r\n        value: rules[key]\r\n      })\r\n    }\r\n\r\n    // console.log('extractComparisons', rules, comparisons)\r\n    return comparisons\r\n  }\r\n\r\n  evaluateCondition(condition, getFieldValue) {\r\n\r\n    let visibility = true\r\n\r\n    /**\r\n     * Current condition only applies when all other conditions from\r\n     * previous levels are false\r\n     *\r\n     * <If> -> <Else if/> -> <Else if/> ... etc\r\n     */\r\n    for (const previousCondition of condition.previousLevels) {\r\n\r\n      const comparisons = this.extractComparisons(previousCondition)\r\n\r\n      for (const { field, value, compare } of comparisons) {\r\n\r\n        const fieldValue = getFieldValue(field)\r\n\r\n        // Ignore the rest if any previous level matched\r\n        if ( this.compare(fieldValue, value, compare) ) return false\r\n      }\r\n    }\r\n\r\n    // Current condition\r\n\r\n    const comparisons = this.extractComparisons(condition.current)\r\n\r\n    for (const { field, value, compare } of comparisons) {\r\n\r\n      const fieldValue = getFieldValue(field)\r\n\r\n      // Ignore the rest if any comparison does not match\r\n      if ( !this.compare(fieldValue, value, compare) ) return false\r\n    }\r\n\r\n    return visibility\r\n  }\r\n\r\n  /**\r\n   * Shared comparison function to apply supported operators\r\n   */\r\n  compare(firstValue, secondValue, operator = 'is') {\r\n\r\n    let result = false\r\n\r\n    switch (operator) {\r\n    case 'is':\r\n    case 'equal':\r\n    case 'not':\r\n    default:\r\n      result = firstValue === secondValue\r\n      if (operator==='not') result = !result\r\n      break\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n","/**\r\n * Helpers to get fields data of a module form \r\n */\r\n\r\nconst $ = jQuery\r\n\r\nconst onFormChange = ($form, callback) => {\r\n\r\n  callback()\r\n\r\n  $form.find('select').on('change', callback)\r\n  $form.find('input').on('change', callback)\r\n  $form.find('input[type=text], input[type=number]').on('input', callback)\r\n  \r\n  // WYSIWYG editors\r\n  const $editors = $form.find('.fl-editor-field')\r\n  \r\n  $editors.each( i => {\r\n    const editor = getEditor($editors[i]) \r\n    if( editor ) editor.on('change', callback)\r\n  })\r\n} \r\n\r\nconst getFormFields = ($form, conditions) => {\r\n  \r\n  const $fields = $form.find('select, input, .fl-editor-field')\r\n  const settings = {}\r\n\r\n  $fields.each( i => {\r\n\r\n    const setting = getFormField( $fields[i] )\r\n\r\n    if( ! setting ) return;\r\n\r\n    setting.conditions = conditions[ setting.name ] || false\r\n    setting.element    = $fields[i]\r\n\r\n    settings[ setting.name ] = setting\r\n  })\r\n  \r\n  return settings\r\n}\r\n\r\n/**\r\n * We get settings differently according to DOM element\r\n */\r\nconst getFormField = field => {\r\n\r\n  switch(field.tagName) {\r\n\r\n    case 'SELECT':\r\n      if(field.multiple) {\r\n        return field.name !== ''\r\n          ? { name: field.name, value: $(field).val().join(',') }\r\n          : false\r\n      }\r\n\r\n      // falls through - https://eslint.org/docs/rules/no-fallthrough\r\n\r\n    case 'INPUT':\r\n      return field.name !== ''\r\n        ? { name: field.name, value: $(field).val() }\r\n        : false\r\n\r\n    // Tiny MCE content (should we support condition for this?)\r\n    case 'DIV':\r\n\r\n      const name = $(field).attr('data-name')\r\n      const editor = getEditor(field)\r\n\r\n      return { name: name, value: editor.getContent() }\r\n    }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * For wysiwyg/editor, beaver builder use tinyMCE so we need to use it to get value/events\r\n */\r\nconst getEditor = element => {\r\n\r\n  const id = $(element).find('.wp-editor-tabs button').attr('data-wp-editor-id')\r\n\r\n  return window.tinyMCE ? window.tinyMCE.get(id) : false\r\n}\r\n\r\nexport {\r\n  onFormChange,\r\n  getFormFields,\r\n  getEditor\r\n}\r\n","import ControlVisibility from '../../../template-controls-visibility'\r\nimport { onFormChange, getFormFields } from '../form'\r\n\r\nconst $ = jQuery\r\n\r\nconst init = module => {\r\n  \r\n  FLBuilder.addHook('settings-form-init', () => {\r\n    \r\n    const init  = (e, data) => initVisibility(module, data)\r\n    const clear = () => {\r\n      FLBuilder.removeHook('didCompleteAJAX', init)\r\n      FLBuilder.removeHook('didHideLightbox', clear)\r\n    } \r\n\r\n    FLBuilder.addHook('didCompleteAJAX', init)\r\n    FLBuilder.addHook('didHideLightbox', clear)\r\n  })\r\n\r\n}\r\n\r\nconst initVisibility = (module, data) => {\r\n\r\n  if( ! data.fl_builder_data ) return;\r\n  \r\n  const formName = data.fl_builder_data.form ?? '' \r\n  const settings = data.settings ?? []\r\n\r\n  const prefix = `_tangible_repeater_${module.blockId}_` // Should pass _tangible_repeater_ from backend\r\n  const isRepeater = formName.startsWith(prefix)\r\n  \r\n  if( ! isRepeater ) return;\r\n\r\n  const repeaterName = formName.replace(prefix, '')\r\n\r\n  const repeaters = module.conditions.repeater ?? {}\r\n  const conditons = repeaters[ repeaterName ] ?? false\r\n  \r\n  if( ! conditons ) return;\r\n\r\n  const visibility = new ControlVisibility(conditons)\r\n  const $repeaterForm = $(`form[data-form-id=${formName}]`)\r\n  \r\n  if( ! $repeaterForm ) return;\r\n\r\n  onFormChange(\r\n    $repeaterForm,\r\n    () => setVisibility(\r\n      $repeaterForm, \r\n      module, \r\n      visibility, \r\n      repeaterName\r\n    )\r\n  )\r\n}\r\n\r\nconst setVisibility = ($form, module, visibility, repeaterName) => {\r\n\r\n  const fields = getFormFields($form, module.repeaters[repeaterName] ?? {})\r\n  const getValue = name => fields[name] ? fields[name].value : undefined\r\n\r\n  for ( const fieldName in fields ) {\r\n\r\n    const field = fields[ fieldName ]\r\n\r\n    if ( ! field.conditions\r\n      || ! field.conditions.length\r\n    ) continue // No conditions: The field is always visible\r\n    \r\n    const isFieldVisible = visibility.evaluateConditions(\r\n      field.conditions,\r\n      getValue\r\n    )\r\n    \r\n    const $field = $(field.element).closest('.fl-field')\r\n\r\n    $field[ isFieldVisible ? 'show' : 'hide' ]()\r\n  }\r\n\r\n}\r\n\r\nexport { init }\r\n","import ControlVisibility from '../../../template-controls-visibility'\r\n\r\nimport { init as initRepeater } from './repeater'\r\nimport { onFormChange, getFormFields } from '../form'\r\n\r\nconst $ = jQuery\r\n\r\nconst init = module => {\r\n\r\n  const visibility = new ControlVisibility(\r\n    module.conditions.general,\r\n  )\r\n\r\n  onFormChange(\r\n    module.form,\r\n    () => setVisibility(module, visibility)\r\n  )\r\n\r\n  initRepeater(module)\r\n}\r\n\r\nconst setVisibility = (module, visibility) => {\r\n\r\n  // Evaluate and apply visibility of tabs/sections/fields\r\n  \r\n  const tabSettings     = module.getTabSettings()\r\n  const sectionSettings = module.getSectionSettings()\r\n  const fieldSettings   = getFormFields(module.form, module.fields)\r\n\r\n  const getFieldValue = name => fieldSettings[name]\r\n    ? fieldSettings[name].value\r\n    : undefined\r\n\r\n  // Tabs\r\n\r\n  for (const tabName in tabSettings) {\r\n\r\n    const tabSetting = tabSettings[ tabName ]\r\n\r\n    if ( ! tabSetting.conditions\r\n      || ! tabSetting.conditions.length\r\n    ) continue // Always visible\r\n\r\n    const isTabVisible = visibility.evaluateConditions(\r\n      tabSetting.conditions,\r\n      getFieldValue\r\n    )\r\n\r\n    const $tab = $(tabSetting.element)\r\n\r\n    // NOTE: Always show currently active tab\r\n    if ( ! $tab.hasClass('fl-active') ) {\r\n      $tab[ isTabVisible ? 'show' : 'hide' ]()\r\n    }\r\n  }\r\n\r\n  // Sections\r\n\r\n  for (const sectionName in sectionSettings) {\r\n\r\n    const sectionSetting = sectionSettings[ sectionName ]\r\n\r\n    if ( ! sectionSetting.conditions\r\n      || ! sectionSetting.conditions.length\r\n    ) continue // Always visible\r\n\r\n    const isSectionVisible = visibility.evaluateConditions(\r\n      sectionSetting.conditions,\r\n      getFieldValue\r\n    )\r\n\r\n    const $section = $(sectionSetting.element)\r\n\r\n    $section[ isSectionVisible ? 'show' : 'hide' ]()\r\n  }\r\n\r\n  // Fields\r\n  \r\n  for ( const fieldName in fieldSettings ) {\r\n\r\n    const fieldSetting = fieldSettings[ fieldName ]\r\n\r\n    if ( ! fieldSetting.conditions\r\n      || ! fieldSetting.conditions.length\r\n    ) continue // No conditions: The field is always visible\r\n    \r\n    const isFieldVisible = visibility.evaluateConditions(\r\n      fieldSetting.conditions,\r\n      getFieldValue\r\n    )\r\n    \r\n    const $field = $(fieldSetting.element).closest('.fl-field')\r\n\r\n    $field[ isFieldVisible ? 'show' : 'hide' ]()\r\n  }\r\n}\r\n\r\nexport { init }\r\n","import { init as initVisibility } from './visibility/general'\r\nimport { getEditor } from './form'\r\n\r\nconst {\r\n  blockConfig: { \r\n    slug,\r\n    visibility \r\n  }\r\n} = Tangible\r\n\r\nconst $ = jQuery\r\n\r\nexport const initModule = blockId => {\r\n\r\n  const moduleName = slug + blockId\r\n\r\n  /**\r\n   * Beaver builder field condtional logic is not enough to do what we want, we will implement \r\n   * our own logic system instead\r\n   *\r\n   * @see https://community.wpbeaverbuilder.com/t/problem-in-multiple-dependecy/7803/3\r\n   */\r\n\r\n  FLBuilder.registerModuleHelper(moduleName, {\r\n\r\n    init() {\r\n\r\n      this.bindMethods()\r\n\r\n      this.form = $('.fl-builder-settings')\r\n      this.blockId = blockId\r\n\r\n      this.tabs       = visibility.tabs[ blockId ]       || {}\r\n      this.sections   = visibility.sections[ blockId ]   || {}\r\n      this.fields     = visibility.fields[ blockId ]     || {}\r\n      this.repeaters  = visibility.repeaters[ blockId ]  || {}\r\n      this.conditions = visibility.conditions[ blockId ] || {}\r\n\r\n      if ( ! Object.keys(this.tabs).length\r\n        && ! Object.keys(this.sections).length\r\n        && ! Object.keys(this.fields).length\r\n      ) {\r\n        return // No visibility conditions\r\n      }\r\n\r\n      initVisibility(this)\r\n    },\r\n\r\n    bindMethods() {\r\n      this.getTabSettings     = this.getTabSettings.bind(this)\r\n      this.getSectionSettings = this.getSectionSettings.bind(this)\r\n    },\r\n\r\n    getTabSettings() {\r\n\r\n      const settings = {}\r\n      const $tabs = this.form.find('.fl-builder-settings-tabs a')\r\n\r\n      $tabs.each( i => {\r\n\r\n        /**\r\n         * Get tab name from element href (!)\r\n         * TODO: More reliable if name was passed from a data attribute\r\n         */\r\n\r\n        const element = $tabs[i]\r\n        const href = element.getAttribute('href')\r\n        const name = href.replace('#fl-builder-settings-tab-', '')\r\n\r\n        if( ! name ) return;\r\n\r\n        const setting = { name }\r\n\r\n        setting.conditions = this.tabs[ setting.name ] || false\r\n        setting.element = element\r\n\r\n        settings[ setting.name ] = setting\r\n      })\r\n\r\n      return settings\r\n    },\r\n\r\n    getSectionSettings() {\r\n\r\n      const settings = {}\r\n      const $sections = this.form.find('.fl-builder-settings-section')\r\n\r\n      $sections.each( i => {\r\n\r\n        /**\r\n         * Get section name from element ID\r\n         * TODO: More reliable if name was passed from a data attribute\r\n         */\r\n\r\n        const element = $sections[i]\r\n        const id = element.getAttribute('id')\r\n        const name = id.replace('fl-builder-settings-section-', '')\r\n\r\n        if( ! name ) return;\r\n\r\n        const setting = {\r\n          name\r\n        }\r\n\r\n        setting.conditions = this.sections[ setting.name ] || false\r\n        setting.element = element\r\n\r\n        settings[ setting.name ] = setting\r\n      })\r\n\r\n      return settings\r\n    }\r\n\r\n  })\r\n\r\n}\r\n","import { initModule } from './module'\r\n\r\nconst { blockConfig } = window.Tangible\r\nconst { fields } = blockConfig.visibility\r\n\r\njQuery(() => { for( const blockId in fields ) initModule(blockId) })\r\n","const Modal = props => {\r\n  \r\n  return (\r\n    <div id=\"tangible-logic-root\" className=\"tangible-logic-open\">\r\n      <div className=\"tangible-logic-modal\">\r\n        <div className=\"tangible-logic-header\">\r\n          <div className=\"tangible-logic-title\">{ props.title ? props.title : '' }</div>\r\n          <button id=\"logic-button-cancel\" className=\"tangible-components-button has-icon\" type=\"button\" aria-label=\"Close dialog\" onClick={ props.cancel }>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" role=\"img\"\r\n              aria-hidden=\"true\" focusable=\"false\">\r\n              <path\r\n                d=\"M12 13.06l3.712 3.713 1.061-1.06L13.061 12l3.712-3.712-1.06-1.06L12 10.938 8.288 7.227l-1.061 1.06L10.939 12l-3.712 3.712 1.06 1.061L12 13.061z\">\r\n              </path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"tangible-logic-rule-group\">\r\n          { props.children }\r\n        </div>\r\n\r\n        <div className=\"tangible-logic-actions tangible-logic-clear\">\r\n          <button id=\"logic-button-cancel\" className=\"tangible-components-button is-tertiary\" type=\"button\" onClick={ props.cancel }>Cancel</button>\r\n          <button id=\"logic-button-add-logic\" className=\"tangible-components-button is-primary\" type=\"button\" onClick={ props.submit }>Save</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","const getControl = (\n  handler, \n  value, \n  props\n) => (\n  tangibleFields.render({\n    onChange: value => handler(\n      Array.isArray(value) || typeof value === 'object'\n        ? JSON.stringify(value) \n        : String(value)\n    ),\n    value: value,\n    ...props \n  })\n)\n\nexport { getControl }\n","import { \n  useState, \n  useEffect \n} from 'react'\n\nimport Modal from '../common/modal/Modal'\nimport { getControl } from './'\n\nconst Control = props => {\n\n  const { \n    config, \n    field, \n    builder, \n    initialValue \n  } = props\n\n  const isPopup = config.popup\n\n  const [isOpen, setIsOpen] = useState(builder === 'beaver-builder')\n  const [value = initialValue, setValue] = useState()\n  const [saved = initialValue, setSaved] = useState()\n  \n  const save = data => isPopup ? setValue(data) : (setSaved(data), setValue(data))\n\n  useEffect(() => props.save(saved), [saved])\n  useEffect(() => isPopup && isOpen && setValue(saved), [isOpen])\n\n  const control =\n    <div className={ `tangible-block-control tangible-block-control-${config.type}` }>\n      { getControl(save, saved, field) }\n    </div>\n  \n  if( ! isPopup ) return control;\n\n  const cancel = () => setIsOpen(false)\n  const submit = () => { setIsOpen(false), setSaved(value) }\n  \n  /**\n   * The button/onClick logic is not handled here in the case of beaver-builder because we need to create \n   * the button and the popup at 2 different places in the DOM\n   * \n   * @see assets/src/beaver-template-editor/fields/dynamic/index.js\n   */\n\n  const button = builder !== 'beaver-builder' &&\n    <div className={ `tangible-control-modal-button-container tangible-control-modal-button-container-${builder}` }>\n\n      { builder === 'elementor' && \n        <label className='elementor-control-title'>\n          { field.label }\n        </label> }\n    \n      <button onClick={ () => setIsOpen(!isOpen) } class=\"components-button is-secondary tangible-control-btn\">\n        Open Settings\n      </button>\n    </div>\n    \n\n  if( ! isOpen ) return button;\n\n  return(\n    <>\n      { button }\n      <Modal submit={ submit } cancel={ cancel } title={ field.label }>\n        { control }\n      </Modal>\n    </>\n  )\n}\n\nexport default Control\n","import { \n  render, \n  unmountComponentAtNode \n} from 'react'\n\nimport Control from '../../template-block-fields/Control'\n\nconst { blockConfig: { controls } } = Tangible\nconst $ = jQuery\n\n$(() => {\n  for( const controlName in controls ) {\n    initControl(controls[controlName])\n  } \n})\n\n/**\n * Init custom controls\n *\n * @see tangible-block-fields/Control.js\n */\n\nconst initControl = control => {\n  \n  FLBuilder.addHook('didShowLightbox', () => {\n\n    const controlContainers = document.getElementsByClassName(`${control.prefixed_type}-container`)\n\n    if( controlContainers.length === 0 ) return;\n    \n    for (let i = 0; i < controlContainers.length; i++) {\n\n      const container = controlContainers[ i ]\n      const $input = $(container).next()\n\n      const data = JSON.parse(container.getAttribute('data-field'))\n      \n      if( ! control.popup ) {\n        render( initComponent(control, $input, data), container )\n        continue;\n      }\n\n      /**\n       * We can't create the popup directly in the lightbox, but the button need to be there\n       */\n\n      const popupContainer = document.createElement('div')\n      \n      popupContainer.setAttribute('class', `${control.prefixed_type}-popup-container`)\n      document.body.append(popupContainer)\n\n      const buttonClasses = `tangible-block-control-button ${control.prefixed_type}-popup-container`\n      \n      const onClickAction = () => {\n        \n        unmountComponentAtNode(popupContainer)\n        \n        render( \n          initComponent(control, $input, field), \n          popupContainer \n        )\n      }\n\n      render(\n        <button className={ buttonClasses } onClick={ onClickAction }>\n          Open Settings\n        </button>\n      , container)\n    }\n\n  })\n\n  /**\n   * @see _lightboxClosed() in /bb-plugin/js/fl-builder.js\n   */\n  FLBuilder.addHook('settings-lightbox-closed', () => {\n\n    const controlContainers = document.getElementsByClassName(`tangible-block-control-${control.prefixed_type}-container`)\n\n    if( controlContainers.length === 0 ) return;\n\n    for (let i = 0; i < controlContainers.length; i++) {\n      unmountComponentAtNode(controlContainers[i])\n    }\n\n    if( ! control.popup ) return;\n\n    const popupContainers = document.getElementsByClassName(`${control.prefixed_type}-popup-container`)\n\n    for (let i = 0; i < popupContainers.length; i++) {\n      unmountComponentAtNode(popupContainers[i])\n    }\n  })\n\n}\n\nconst initComponent = (control, $input, field) => (\n  <Control\n    config={ control }\n    initialValue={ $input.val() }\n    builder={ 'beaver-builder' }\n    field={ field }\n    save={ value => {\n      $input.val(value)\n      $input.trigger('change')\n    }}\n  />\n)\n"],"names":["ControlVisibility","conditionsMap","conditions","getFieldValue","visibility","key","condition","indexes","number","level","_a","conditionNumber","conditionLevel","currentLevel","previousConditions","rules","comparisons","field","_","index","previousCondition","value","compare","fieldValue","firstValue","secondValue","operator","result","__name","$","onFormChange","$form","callback","$editors","i","editor","getEditor","getFormFields","$fields","settings","setting","getFormField","name","element","id","init","module","e","data","initVisibility","clear","formName","_b","prefix","repeaterName","conditons","_d","_c","$repeaterForm","setVisibility","fields","getValue","fieldName","isFieldVisible","initRepeater","tabSettings","sectionSettings","fieldSettings","tabName","tabSetting","isTabVisible","$tab","sectionName","sectionSetting","isSectionVisible","fieldSetting","slug","initModule","blockId","moduleName","$tabs","$sections","blockConfig","Modal","props","getControl","handler","__spreadValues","O","t","o","M","a","m","c","l","useState","k","b","d","r","useEffect","s","p","y","C","N","g","f","S","n","u","render","initComponent","unmountComponentAtNode"],"mappings":"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"}