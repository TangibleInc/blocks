{"version":3,"file":"elementor-integration.min.js.map","sources":["../src/template-controls-visibility/index.js","../src/elementor-integration/widgets/visibility/repeater.js","../src/elementor-integration/widgets/tabs.js","../src/elementor-integration/widgets/visibility/general.js","../src/elementor-integration/widgets/index.js","../src/common/modal/Modal.jsx","../src/template-block-fields/index.jsx","../src/template-block-fields/Control.jsx","../src/elementor-integration/fields/index.jsx"],"sourcesContent":["/**\r\n * Evaluate current conditions to determine block control visibility\r\n *\r\n * @see gutenberg-template-editor/blocks/dynamic/create.js\r\n * @see beaver-template-editor/modules/dynamic/module.js\r\n * @see elementor-template-editor/widgets/dynamic/visibility.js\r\n */\r\n\r\nexport default class ControlVisibility {\r\n\r\n  constructor(conditionsMap) {\r\n\r\n    this.conditionsMap = conditionsMap || []\r\n\r\n    this.getPreviousLevels = this.getPreviousLevels.bind(this)\r\n    this.getCondition = this.getCondition.bind(this)\r\n  }\r\n\r\n  evaluateConditions(conditions, getFieldValue) {\r\n\r\n    let visibility = true\r\n\r\n    if( ! conditions || ! Array.isArray(conditions) ) return visibility\r\n\r\n    for (const key of conditions) {\r\n      const condition = this.getCondition(key)\r\n      if ( ! this.evaluateCondition(condition, getFieldValue) ) return false\r\n    }\r\n\r\n    return visibility\r\n  }\r\n\r\n  /**\r\n   * Complete conditions are not stored in items, but it has a key to get it\r\n   *\r\n   * Key structure is: 0-0\r\n   *\r\n   * First is the condition number, refering to an ensemble like:\r\n   * <If>  .... <Else if> .... <If>\r\n   *\r\n   * Second is the condition level, refering to which level of the\r\n   * ensemble needs to be applied (only the starting <If> is 0 for example)\r\n   */\r\n  getCondition(key) {\r\n\r\n    const indexes = key.split('-')\r\n\r\n    const number = parseInt(indexes[0])\r\n    const level  = parseInt(indexes[1])\r\n    \r\n    const data = {\r\n      number: number,\r\n      level: level,\r\n      current: this.conditionsMap[ number ]?.[ level ],\r\n      previousLevels: this.getPreviousLevels( number, level )\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  getPreviousLevels(conditionNumber, conditionLevel) {\r\n\r\n    // If level is 0, it's the first <If> and there is no previous levels\r\n    if(conditionLevel === 0) return []\r\n\r\n    let currentLevel = 0\r\n    const previousConditions = []\r\n\r\n    while (currentLevel < conditionLevel) {\r\n      previousConditions.push( this.conditionsMap[ conditionNumber ][ currentLevel ] )\r\n      currentLevel ++\r\n    }\r\n\r\n    return previousConditions\r\n  }\r\n\r\n  /**\r\n   * Extract standardized comparisons from defined rules\r\n   */\r\n  extractComparisons(rules) {\r\n\r\n    const comparisons = []\r\n\r\n    for (const key in rules) {\r\n\r\n      if ((key==='compare' || key.slice(0, 8)==='compare_')\r\n          || (key==='value' || key.slice(0, 6)==='value_')\r\n      ) continue\r\n\r\n      if (key==='control' || key.slice(0, 8)==='control_') {\r\n\r\n        const field = rules[key]\r\n        const [_, index = 0] = key.split('_')\r\n\r\n        comparisons.push({\r\n          field,\r\n          value:   rules[`value${ index ? '_'+index : '' }`],\r\n          compare: rules[`compare${ index ? '_'+index : '' }`],\r\n        })\r\n        continue\r\n      }\r\n\r\n      // Unknown attribute - Assume controlName=expectedValue for backward compatibility\r\n\r\n      comparisons.push({\r\n        field: key,\r\n        value: rules[key]\r\n      })\r\n    }\r\n\r\n    // console.log('extractComparisons', rules, comparisons)\r\n    return comparisons\r\n  }\r\n\r\n  evaluateCondition(condition, getFieldValue) {\r\n\r\n    let visibility = true\r\n\r\n    /**\r\n     * Current condition only applies when all other conditions from\r\n     * previous levels are false\r\n     *\r\n     * <If> -> <Else if/> -> <Else if/> ... etc\r\n     */\r\n    for (const previousCondition of condition.previousLevels) {\r\n\r\n      const comparisons = this.extractComparisons(previousCondition)\r\n\r\n      for (const { field, value, compare } of comparisons) {\r\n\r\n        const fieldValue = getFieldValue(field)\r\n\r\n        // Ignore the rest if any previous level matched\r\n        if ( this.compare(fieldValue, value, compare) ) return false\r\n      }\r\n    }\r\n\r\n    // Current condition\r\n\r\n    const comparisons = this.extractComparisons(condition.current)\r\n\r\n    for (const { field, value, compare } of comparisons) {\r\n\r\n      const fieldValue = getFieldValue(field)\r\n\r\n      // Ignore the rest if any comparison does not match\r\n      if ( !this.compare(fieldValue, value, compare) ) return false\r\n    }\r\n\r\n    return visibility\r\n  }\r\n\r\n  /**\r\n   * Shared comparison function to apply supported operators\r\n   */\r\n  compare(firstValue, secondValue, operator = 'is') {\r\n\r\n    let result = false\r\n\r\n    switch (operator) {\r\n    case 'is':\r\n    case 'equal':\r\n    case 'not':\r\n    default:\r\n      result = firstValue === secondValue\r\n      if (operator==='not') result = !result\r\n      break\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n","import ControlVisibility from '../../../template-controls-visibility'\r\n\r\nconst $ = jQuery\r\n\r\nconst setVisibility = ( \r\n  $container, \r\n  repeater,\r\n  conditions\r\n) => {\r\n\r\n  const visibility = new ControlVisibility(conditions)\r\n  \r\n  const items  = repeater.value.models\r\n  const $items = $container.find('.elementor-repeater-fields')\r\n  \r\n  items.forEach((item, i) => {\r\n    \r\n    const $item    = $($items[i])\r\n    const values   = item.attributes\r\n    const controls = item.controls\r\n\r\n    const getValue = name => ( values[ 'tangible_control_' + name ] ?? undefined )\r\n\r\n    for( const name in values ) {\r\n\r\n      const $control = $item.find(`.elementor-control-${name}`)\r\n\r\n      if( ! $control ) continue;\r\n\r\n      const conditions = controls[ name ].tangible_conditions ?? []\r\n      \r\n      const isVisible = visibility.evaluateConditions(\r\n        conditions, \r\n        getValue\r\n      )\r\n \r\n      $control[ isVisible ? 'show' : 'hide' ]()\r\n    }\r\n\r\n  })\r\n\r\n}\r\n\r\nconst refresh = () => repeater.callback ? repeater.callback() : false\r\n\r\nconst observer = new MutationObserver(\r\n  mutations => mutations.forEach( refresh ) \r\n)\r\n\r\nconst init = () => {\r\n\r\n  const repeaters = document.querySelectorAll('.elementor-repeater-fields-wrapper')\r\n\r\n  repeaters.forEach(\r\n    repeater => observer.observe(repeater, { childList: true }) \r\n  )\r\n\r\n  $('.elementor-repeater-fields elementor-control input').on('keyup change', refresh)\r\n  $('.elementor-repeater-fields elementor-control select').on('select2:select', refresh)\r\n} \r\n\r\nconst clear = () => {\r\n\r\n  observer.disconnect()\r\n\r\n  $('.elementor-repeater-fields elementor-control input').off('keyup change', refresh)\r\n  $('.elementor-repeater-fields elementor-control select').off('select2:select', refresh)\r\n}\r\n\r\nconst repeater = {\r\n  setVisibility : setVisibility,\r\n  init          : init,\r\n  clear         : clear,\r\n  callback      : false,\r\n}\r\n\r\nexport default repeater\r\n","const $ = jQuery\r\n\r\n/**\r\n * Workaround to be able to use custom tabs\r\n *\r\n * @see maybe_use_tabs_workaround() in ./includes/integrations/elementor/dynamic/base.php\r\n */\r\n\r\nexport const maybeInitTabsWorkaround = tabs => {\r\n  \r\n  if( ! tabs.content || ! tabs.content.conditions ) return\r\n  if( tabs.content.conditions !== 'default-tab-workaround' ) return\r\n\r\n  const firstTab = document.querySelector('.elementor-component-tab:not([data-tab=\"content\"])')\r\n  $(firstTab).trigger('click')\r\n}\r\n","import ControlVisibility from '../../../template-controls-visibility'\r\nimport repeater from './repeater'\r\n\r\nimport { maybeInitTabsWorkaround } from '../tabs'\r\n\r\nconst {\r\n  Tangible\r\n} = window\r\n\r\nconst { prefix, visibility } = Tangible.blockConfig\r\nconst $ = jQuery\r\n\r\nconst {\r\n  conditions,\r\n  tabs: tabsByBlock,\r\n  sections: sectionsByBlock\r\n} = visibility\r\n\r\n/**\r\n * Hide/Show fields according to conditions, for a given widget (if any)\r\n *\r\n * @see index.js\r\n */\r\nexport const widgetVisibility = currentWidget => {\r\n\r\n  const widgdetName = currentWidget.attributes.widgetType\r\n\r\n  if( ! widgdetName.startsWith(prefix.slug) ) return\r\n\r\n  const blockId = widgdetName.slice(prefix.slug.length)\r\n  const controls = getBlockControls(blockId)\r\n\r\n  let tabs = tabsByBlock[blockId] || {}\r\n  let sections = sectionsByBlock[blockId] || {}\r\n\r\n  // When an object is empty, PHP's json_encode passes an array\r\n  if (Array.isArray(tabs)) tabs = {}\r\n  if (Array.isArray(sections)) sections = {}\r\n\r\n  const visibility = new ControlVisibility(\r\n    conditions[ blockId ].general\r\n  )\r\n\r\n  const getElementorSettings = () => currentWidget.get('settings').attributes\r\n  const refresh = () => {\r\n    \r\n    $('.elementor-control-type-section').off('click', refresh)\r\n    $('.elementor-control input').off('keyup change', refresh)\r\n    $('.elementor-control select').off('select2:select', refresh)\r\n    $('.elementor-component-tab').off('click', refresh)\r\n    \r\n    repeater.clear()\r\n\r\n    setVisibility({\r\n      controls,\r\n      visibility,\r\n      elementorSettings: getElementorSettings(),\r\n      tabs,\r\n      sections,\r\n      blockId\r\n    })\r\n\r\n    $('.elementor-control-type-section').on('click', refresh)\r\n    $('.elementor-control input').on('keyup change', refresh)\r\n    $('.elementor-control select').on('select2:select', refresh)\r\n    $('.elementor-component-tab').on('click', refresh)\r\n\r\n    repeater.init()\r\n\r\n  }\r\n\r\n  maybeInitTabsWorkaround(tabs)\r\n  repeater.callback = refresh \r\n  \r\n  refresh() // Initial visibility\r\n}\r\n\r\n/**\r\n * Get the info needed from ElementorConfig according to block id\r\n */\r\nconst getBlockControls = blockId => {\r\n\r\n  const widgetName = prefix.slug + blockId\r\n  const controls = elementor.widgetsCache[ widgetName ].controls\r\n  const tangibleControls = {}\r\n\r\n  for( const controlName in controls ) {\r\n\r\n    if( ! controlName.startsWith(prefix.control) ) continue\r\n\r\n    tangibleControls[ controlName ] = controls[ controlName ]\r\n  }\r\n\r\n  return tangibleControls\r\n}\r\n\r\nconst element = name => ( $('#elementor-controls').find(`[data-setting='${ name }']`) )\r\n\r\n/**\r\n * Evaluate and apply visibility of tabs/sections/fields\r\n */\r\nconst setVisibility = ({\r\n  controls,\r\n  visibility,\r\n  elementorSettings,\r\n  tabs,\r\n  sections,\r\n  blockId\r\n}) => {\r\n\r\n  const controlSettings = getControlSettings(controls, elementorSettings)\r\n\r\n  const getFieldValue = name => controlSettings[ name ]\r\n    ? controlSettings[ name ].value\r\n    : undefined\r\n\r\n  // Tabs\r\n\r\n  for (const tabName of Object.keys(tabs)) {\r\n\r\n    const tab = tabs[tabName]\r\n\r\n    const isVisible = tab.conditions === 'default-tab-workaround'\r\n      ? false\r\n      : visibility.evaluateConditions(\r\n        tab.conditions,\r\n        getFieldValue\r\n      )\r\n\r\n    const $tab = $(`.elementor-tab-control-${tabName}`)\r\n\r\n    // Currently active tab is always visible\r\n    if ($tab.hasClass('elementor-active')) continue\r\n\r\n    $tab[ isVisible ? 'show' : 'hide' ]()\r\n  }\r\n\r\n  // Sections\r\n\r\n  for (const sectionName of Object.keys(sections)) {\r\n\r\n    const section = sections[sectionName]\r\n\r\n    const isVisible = visibility.evaluateConditions(\r\n      section.conditions,\r\n      getFieldValue\r\n    )\r\n\r\n    const $section = $(`.elementor-control-tangible_section_${sectionName}`)\r\n\r\n    // Currently open section is always visible\r\n    if ($section.hasClass('elementor-open')) continue\r\n\r\n    $section[ isVisible ? 'show' : 'hide' ]()\r\n  }\r\n\r\n  // Controls\r\n\r\n  for( const controlName in controlSettings ) {\r\n\r\n    const control = controlSettings[ controlName ]\r\n\r\n    const isVisible = visibility.evaluateConditions(\r\n      control.conditions,\r\n      getFieldValue\r\n    )\r\n\r\n    const $control = $(`.elementor-control-${control.dataName}`)\r\n\r\n    $control[ isVisible ? 'show' : 'hide' ]()\r\n\r\n    const repeaterConditions = conditions[ blockId ].repeater[ controlName ] ?? false\r\n\r\n    if( ! repeaterConditions ) continue;\r\n  \r\n    setTimeout( // :(\r\n      () => repeater.setVisibility( \r\n        $control, \r\n        control,\r\n        repeaterConditions\r\n      )\r\n    ) \r\n  }\r\n}\r\n\r\nconst getControlSettings = (controls, elementorSettings) => {\r\n\r\n  const settings = {}\r\n\r\n  for( const control in controls ) {\r\n\r\n    const setting = {\r\n      value:    getValue(elementorSettings[ control ], controls[ control ]),\r\n      dataName: control,\r\n      name:     control.slice(prefix.control.length)\r\n    }\r\n\r\n    if( controls[ control ].tangible_conditions ) {\r\n      setting.conditions = controls[ control ].tangible_conditions\r\n    }\r\n\r\n    settings[ setting.name ] = setting\r\n  }\r\n\r\n  return settings\r\n}\r\n\r\nconst getValue = (value, control) => {\r\n\r\n  if ( control.type !== 'number' && control.type !== 'switcher' ) return value\r\n\r\n  if ( control.type === 'number' ) return value ? value.toString() : value\r\n\r\n  const $switch = element(control.name)\r\n\r\n  // We can trust elementor switch value when value comes from a section that is not currently open\r\n  if( $switch.length === 0 ) return value\r\n\r\n  // Otherwise we get value ourself because it will be inaccurate\r\n  return $switch.is(':checked') ? control.return_value : control.return_off\r\n}\r\n","import { widgetVisibility } from './visibility/general'\r\n\r\njQuery(() => {\r\n\r\n  /**\r\n   * Triggered each time Elementor's editor open something\r\n   */\r\n  elementor.hooks.addAction( 'panel/open_editor/widget', (panel, model) => {\r\n    \r\n    if( model.attributes.elType !== 'widget' ) return;\r\n\r\n    widgetVisibility(model)\r\n    \r\n  })\r\n\r\n})\r\n\r\n","const Modal = props => {\r\n  \r\n  return (\r\n    <div id=\"tangible-logic-root\" className=\"tangible-logic-open\">\r\n      <div className=\"tangible-logic-modal\">\r\n        <div className=\"tangible-logic-header\">\r\n          <div className=\"tangible-logic-title\">{ props.title ? props.title : '' }</div>\r\n          <button id=\"logic-button-cancel\" className=\"tangible-components-button has-icon\" type=\"button\" aria-label=\"Close dialog\" onClick={ props.cancel }>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" role=\"img\"\r\n              aria-hidden=\"true\" focusable=\"false\">\r\n              <path\r\n                d=\"M12 13.06l3.712 3.713 1.061-1.06L13.061 12l3.712-3.712-1.06-1.06L12 10.938 8.288 7.227l-1.061 1.06L10.939 12l-3.712 3.712 1.06 1.061L12 13.061z\">\r\n              </path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"tangible-logic-rule-group\">\r\n          { props.children }\r\n        </div>\r\n\r\n        <div className=\"tangible-logic-actions tangible-logic-clear\">\r\n          <button id=\"logic-button-cancel\" className=\"tangible-components-button is-tertiary\" type=\"button\" onClick={ props.cancel }>Cancel</button>\r\n          <button id=\"logic-button-add-logic\" className=\"tangible-components-button is-primary\" type=\"button\" onClick={ props.submit }>Save</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","const getControl = (\n  handler, \n  value, \n  props\n) => (\n  tangibleFields.render({\n    onChange: value => handler(\n      Array.isArray(value) || typeof value === 'object'\n        ? JSON.stringify(value) \n        : String(value)\n    ),\n    value: value,\n    ...props \n  })\n)\n\nexport { getControl }\n","import { \n  useState, \n  useEffect \n} from 'react'\n\nimport Modal from '../common/modal/Modal'\nimport { getControl } from './'\n\nconst Control = props => {\n\n  const { \n    config, \n    field, \n    builder, \n    initialValue \n  } = props\n\n  const isPopup = config.popup\n\n  const [isOpen, setIsOpen] = useState(builder === 'beaver-builder')\n  const [value = initialValue, setValue] = useState()\n  const [saved = initialValue, setSaved] = useState()\n  \n  const save = data => isPopup ? setValue(data) : (setSaved(data), setValue(data))\n\n  useEffect(() => props.save(saved), [saved])\n  useEffect(() => isPopup && isOpen && setValue(saved), [isOpen])\n\n  const control =\n    <div className={ `tangible-block-control tangible-block-control-${config.type}` }>\n      { getControl(save, saved, field) }\n    </div>\n  \n  if( ! isPopup ) return control;\n\n  const cancel = () => setIsOpen(false)\n  const submit = () => { setIsOpen(false), setSaved(value) }\n  \n  /**\n   * The button/onClick logic is not handled here in the case of beaver-builder because we need to create \n   * the button and the popup at 2 different places in the DOM\n   * \n   * @see assets/src/beaver-template-editor/fields/dynamic/index.js\n   */\n\n  const button = builder !== 'beaver-builder' &&\n    <div className={ `tangible-control-modal-button-container tangible-control-modal-button-container-${builder}` }>\n\n      { builder === 'elementor' && \n        <label className='elementor-control-title'>\n          { field.label }\n        </label> }\n    \n      <button onClick={ () => setIsOpen(!isOpen) } class=\"components-button is-secondary tangible-control-btn\">\n        Open Settings\n      </button>\n    </div>\n    \n\n  if( ! isOpen ) return button;\n\n  return(\n    <>\n      { button }\n      <Modal submit={ submit } cancel={ cancel } title={ field.label }>\n        { control }\n      </Modal>\n    </>\n  )\n}\n\nexport default Control\n","import {\n  render, \n  unmountComponentAtNode\n} from 'react'\n\nimport Control from '../../template-block-fields/Control'\n\nconst { blockConfig: { controls } } = Tangible\nconst $ = jQuery\n\n$(window).on('elementor:init', () => {\n  for( const controlName in controls ) {\n    initControl(controls[controlName])\n  } \n})\n\n/**\n * Init custom controls\n * \n * @see tangible-block-fields/Control.js  \n */\n\nconst initControl = control => {\n\n  const elementorControl = elementor.modules.controls.BaseData.extend({\n\n    onReady: function() {\n\n      const wrapper = this.ui.contentEditable.prevObject[0]\n      const reactDiv = wrapper.getElementsByClassName(control.prefixed_type)[0]\n\n      const field = JSON.parse(reactDiv.getAttribute('data-field'))\n\n      const saveValue = this.saveValue.bind(this)\n\n      render(<Control \n        config={ control }\n        field={ field }\n        initialValue={ this.ui.input.val() }\n        builder={ 'elementor' }\n        save={ saveValue } \n      />, reactDiv)\n    },\n\n    saveValue: function(value) {\n      this.ui.input.val(value)\n      this.setValue(this.ui.input.val()) \n    },\n\n    /**\n     * Called automatically by elementor\n     */\n    onBeforeDestroy: function() {\n\n      this.saveValue(this.ui.input.val())\n\n      const wrapper = this.ui.contentEditable.prevObject[0]\n      unmountComponentAtNode(wrapper)\n    }\n  })\n\n  elementor.addControlView(control.prefixed_type, elementorControl)\n}\n"],"names":["ControlVisibility","conditionsMap","conditions","getFieldValue","visibility","key","condition","indexes","number","level","_a","conditionNumber","conditionLevel","currentLevel","previousConditions","rules","comparisons","field","_","index","previousCondition","value","compare","fieldValue","firstValue","secondValue","operator","result","__name","$","setVisibility","$container","repeater","items","$items","item","i","$item","values","controls","getValue","name","$control","isVisible","refresh","observer","mutations","init","clear","maybeInitTabsWorkaround","tabs","firstTab","Tangible","prefix","tabsByBlock","sectionsByBlock","widgetVisibility","currentWidget","widgdetName","blockId","getBlockControls","sections","getElementorSettings","widgetName","tangibleControls","controlName","element","elementorSettings","controlSettings","getControlSettings","tabName","tab","$tab","sectionName","section","$section","control","repeaterConditions","settings","setting","$switch","panel","model","Modal","props","getControl","handler","__spreadValues","O","t","e","o","M","a","n","m","c","l","useState","k","b","d","r","useEffect","s","p","y","C","N","g","f","S","render","unmountComponentAtNode"],"mappings":"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"}